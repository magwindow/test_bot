import asyncio
import logging
import time
import random
from pycoingecko import CoinGeckoAPI

from aiogram import F, Bot, Dispatcher, types
from aiogram.filters import Command, CommandStart
from aiogram.enums import ContentType

from config import ADMIN_ID, TOKEN, PAYMASTER_TEST, CHANNEL_ID
from keyboards import (main_menu, sub_inline_markup, sub_channel_markup, other_inline_menu, crypto_list_inline)
from database import Database
from utils import check_sub_channel, days_to_seconds, time_sub_day

logging.basicConfig(level=logging.INFO)

bot = Bot(token=TOKEN)
dp = Dispatcher()
cg = CoinGeckoAPI()
db = Database('users.db')


@dp.message(CommandStart())
async def start(message: types.Message):
    if check_sub_channel(await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=message.from_user.id)):
        if not db.user_exists(message.from_user.id):
            db.add_user(message.from_user.id)
            await bot.send_message(message.from_user.id, '–£–∫–∞–∂–∏—Ç–µ –Ω–∏–∫–Ω–µ–∏ÃÜ–º')
        else:
            if message.from_user.id == ADMIN_ID:
                await bot.send_message(message.from_user.id, '–í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –í–≤–µ–¥–∏—Ç–µ /sendall <–°–æ–æ–±—â–µ–Ω–∏–µ> —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É.', reply_markup=main_menu)
            await bot.send_message(message.from_user.id, '–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã\n'
                                   '–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã, –≤–≤–µ–¥–∏—Ç–µ /crypto', reply_markup=main_menu)
    else:
        await bot.send_message(message.from_user.id, '–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª', reply_markup=sub_channel_markup)
        

@dp.message(Command('sendall'))
async def send_all(message: types.Message):
    if message.chat.type == 'private':
        if message.from_user.id == ADMIN_ID:
            for row in db.get_users():
                try:
                    await bot.send_message(row[0], message.text[9:])
                    if int(row[1]) != 1:
                        db.set_active(row[0], 1)
                except:
                    db.set_active(row[0], 0)
            await bot.send_message(message.from_user.id, '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º', reply_markup=main_menu)
        
@dp.pre_checkout_query()
async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)
    

@dp.message(F.content_type == ContentType.SUCCESSFUL_PAYMENT)
async def process_payment(message: types.Message):
    if message.successful_payment.invoice_payload == 'month_sub':
        time_sub = int(time.time()) + days_to_seconds(30)
        db.set_time_sub(message.from_user.id, time_sub)
        await bot.send_message(message.from_user.id, '–ü–ª–∞—Ç–µ–∂ –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ!\n–í–∞–º –≤—ã–¥–∞–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü', reply_markup=main_menu)
    
@dp.message()
async def bot_message(message: types.Message):
    if check_sub_channel(await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=message.from_user.id)):
        if message.chat.type == 'private':
            
            # get crypto
            name_crypto = ''
            price_crypto = ''
            for key, value in cg.get_price(ids=message.text, vs_currencies='usd').items():
                name_crypto = key
                price_crypto = value['usd']
            
            
            if message.text == '‚ù§Ô∏è –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è':
                await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É', reply_markup=sub_inline_markup)
            
            elif message.text == 'üë§ –ú–æ–∏ÃÜ –ø—Ä–æ—Ñ–∏–ª—å':
                user_sub = time_sub_day(db.get_time_sub(message.from_user.id))
                if not user_sub:
                    await bot.send_message(message.from_user.id, f'–í–∞—à –Ω–∏–∫–Ω–µ–∏ÃÜ–º: {db.get_nickname(message.from_user.id)}\n'
                                        f'–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞: –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞', reply_markup=main_menu)
                else:
                    await bot.send_message(message.from_user.id, f'–í–∞—à –Ω–∏–∫–Ω–µ–∏ÃÜ–º: {db.get_nickname(message.from_user.id)}\n'
                                        f'–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞: {user_sub}', reply_markup=main_menu)
            
            elif message.text == 'üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π':
                if db.get_sub_status(message.from_user.id):
                    await bot.send_message(message.from_user.id, '–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–∏ÃÜ:', reply_markup=main_menu)
                else:
                    await bot.send_message(message.from_user.id, '–°–Ω–∞—á–∞–ª–∞ –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É', reply_markup=main_menu)
                    
            elif message.text == 'üëÄ –î—Ä—É–≥–æ–µ':
                await bot.send_message(message.from_user.id, '–†–∞–∑–¥–µ–ª –¥—Ä—É–≥–æ–µ:', reply_markup=other_inline_menu)
                
            elif message.text == '/crypto':
                await bot.send_message(message.from_user.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä, Cardano', reply_markup=crypto_list_inline)
            
            elif message.text.lower() == name_crypto:
                await bot.send_message(message.from_user.id, 
                                       f'–°—Ç–æ–∏–º–æ—Å—Ç—å {message.text}: {price_crypto}$', reply_markup=crypto_list_inline)
            
            else:
                if db.get_signup(message.from_user.id) == 'setnickname':
                    if len(message.text) > 15:
                        await bot.send_message(message.from_user.id, '–ù–∏–∫–Ω–µ–∏ÃÜ–º –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 15 —Å–∏–º–≤–æ–ª–æ–≤')
                    elif '@' in message.text or '/' in message.text:
                        await bot.send_message(message.from_user.id, '–ù–∏–∫–Ω–µ–∏ÃÜ–º –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å @ –∏–ª–∏ /')
                    else:
                        db.set_nickname(message.from_user.id, message.text)
                        db.set_signup(message.from_user.id, 'active')
                        await bot.send_message(message.from_user.id, '–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å', reply_markup=main_menu)
                else:
                    await bot.send_message(message.from_user.id, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫', reply_markup=main_menu)
    else:
        await bot.send_message(message.from_user.id, '–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª', reply_markup=sub_channel_markup)
 
 
@dp.callback_query(F.data.startswith('cc_')) 
async def crypto(call: types.CallbackQuery):
    currency = call.data.split('_')[-1]
    result = cg.get_price(ids=currency, vs_currencies='usd')
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    await bot.send_message(call.from_user.id, f'–°—Ç–æ–∏–º–æ—Å—Ç—å {currency}: {result[currency]["usd"]}$', reply_markup=crypto_list_inline)               

@dp.callback_query(F.data == 'submonth')
async def submonth(call: types.CallbackQuery):
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    await bot.send_invoice(
        chat_id=call.from_user.id,
        title='–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏',
        description='–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü',
        payload='month_sub',
        provider_token=PAYMASTER_TEST,
        start_parameter='test',
        currency='rub',
        prices=[types.LabeledPrice(label='RUB', amount=15000)]
    )
    
@dp.callback_query(F.data == 'subchannel')
async def subchannel(message: types.Message):
    await bot.delete_message(chat_id=message.from_user.id, message_id=message.message.message_id)
    
    if check_sub_channel(await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=message.from_user.id)):
        if not db.user_exists(message.from_user.id):
            db.add_user(message.from_user.id)
            await bot.send_message(message.from_user.id, '–£–∫–∞–∂–∏—Ç–µ –Ω–∏–∫–Ω–µ–∏ÃÜ–º')
        else:
            await bot.send_message(message.from_user.id, '–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã', reply_markup=main_menu)
    else:
        await bot.send_message(message.from_user.id, '–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª', reply_markup=sub_channel_markup)
        

@dp.callback_query(F.data == 'btn_random')
async def randomize(message: types.Message):
    await bot.delete_message(chat_id=message.from_user.id, message_id=message.message.message_id)
    await bot.send_message(message.from_user.id, f'–°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ: {random.randint(1, 100)}', reply_markup=other_inline_menu)    

      
async def main():
    await bot.delete_webhook(drop_pending_updates=True)
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())