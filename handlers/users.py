import random
from aiogram import F, Router, types
from aiogram.filters import CommandStart, Command

from pycoingecko import CoinGeckoAPI

from utils import _
from bad_words import BAD_WORDS
from config import ADMIN_ID, BOT_NICKNAME, CHANNELS
from utils import check_sub_channels, get_rate, recognize_question, time_sub_day
from init_bot import bot, db
from keyboards import (main_menu, sub_channel_markup, sub_inline_markup, other_inline_menu, 
                       crypto_list_inline, sub_menu, lang_menu)

user_router = Router()

@user_router.message(CommandStart())
async def start(message: types.Message):
    if not db.user_exists(message.from_user.id):
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
        referrer_id = message.text[7:]
        if str(referrer_id).isdigit() and str(referrer_id) != str(message.from_user.id):
            db.add_user(message.from_user.id, referrer_id)
            lang = db.get_lang(message.from_user.id)           
            try:
                await bot.send_message(referrer_id, f'{_("–í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª", lang)} {message.from_user.id} {_("–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è", lang)}')
            except:
                pass  
        else:
            await bot.send_message(message.from_user.id, _('–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª'), reply_markup=sub_channel_markup)
        
    else:    
        # –°–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        lang = db.get_lang(message.from_user.id)
        await bot.send_message(message.from_user.id, f'{_("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã", lang)}\n'
                              f'{_("–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ç–µ–∫—É—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã, –≤–≤–µ–¥–∏—Ç–µ /crypto", lang)}', reply_markup=main_menu(lang))
    
    
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if message.from_user.id == ADMIN_ID:
        await bot.send_message(message.from_user.id, _('–í—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –í–≤–µ–¥–∏—Ç–µ /sendall <–°–æ–æ–±—â–µ–Ω–∏–µ> —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É.', lang), reply_markup=main_menu(lang))
                    
    
    
 

@user_router.message(Command('crypto'))
async def user_command_crypto(message: types.Message):
    lang = db.get_lang(message.from_user.id)
    if await check_sub_channels(CHANNELS, message.from_user.id):
        if message.chat.type == 'private':
            await bot.send_message(message.from_user.id, _('–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É:', lang), reply_markup=crypto_list_inline(lang))
    else:
        await bot.send_message(message.from_user.id, _('–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª', lang), reply_markup=sub_channel_markup)        


@user_router.message(F.text.in_(['‚ù§Ô∏è –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è', '‚ù§Ô∏è Subscribe']))
async def user_subscribe(message: types.Message):
    lang = db.get_lang(message.from_user.id)
    if await check_sub_channels(CHANNELS, message.from_user.id):
        if message.chat.type == 'private':
            await bot.send_message(message.from_user.id, _('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É', lang), reply_markup=sub_inline_markup(lang))
    else:
        await bot.send_message(message.from_user.id, _('–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª', lang), reply_markup=sub_channel_markup)
        

@user_router.message(F.text.in_(['üë§ –ú–æ–∏ÃÜ –ø—Ä–æ—Ñ–∏–ª—å', 'üë§ My profile']))
async def user_profile(message: types.Message):
    lang = db.get_lang(message.from_user.id)
    if await check_sub_channels(CHANNELS, message.from_user.id):
        if message.chat.type == 'private':
            user_sub = time_sub_day(db.get_time_sub(message.from_user.id))
            if not user_sub:
                await bot.send_message(message.from_user.id, f'{_("–í–∞—à –Ω–∏–∫–Ω–µ–∏ÃÜ–º:", lang)} {db.get_nickname(message.from_user.id)}\n'
                                    f'{_("–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞: –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞", lang)}\n\n{_("–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞", lang)}\nhttps://t.me/{BOT_NICKNAME}?start={message.from_user.id}\n'
                                    f'{_("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:", lang)} {db.count_referals(message.from_user.id)}', reply_markup=main_menu(lang))
            else:
                user_sub = user_sub.split()
                await bot.send_message(message.from_user.id, f'{_("–í–∞—à –Ω–∏–∫–Ω–µ–∏ÃÜ–º:", lang)} {db.get_nickname(message.from_user.id)}\n'
                                    f'{_("–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞:", lang)} {user_sub[0]} {_(user_sub[1], lang)} {user_sub[-1]}\n\n\n{_("–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞", lang)}\nhttps://t.me/{BOT_NICKNAME}?start={message.from_user.id}\n'
                                    f'{_("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤:", lang)} {db.count_referals(message.from_user.id)}', reply_markup=main_menu(lang))
    else:
        await bot.send_message(message.from_user.id, _('–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª', lang), reply_markup=sub_channel_markup)


@user_router.message(F.text.in_(['üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π', 'üë• List of users']))
async def user_list(message: types.Message):
    lang = db.get_lang(message.from_user.id)
    if await check_sub_channels(CHANNELS, message.from_user.id):
        if message.chat.type == 'private':
            if db.get_sub_status(message.from_user.id):
                await bot.send_message(message.from_user.id, _('–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–∏ÃÜ:', lang), reply_markup=main_menu(lang))
            else:
                await bot.send_message(message.from_user.id, _('–°–Ω–∞—á–∞–ª–∞ –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É', lang), reply_markup=main_menu(lang))
    else:
        await bot.send_message(message.from_user.id, _('–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª', lang), reply_markup=sub_channel_markup)
        

@user_router.message(F.text.in_(['üëÄ –î—Ä—É–≥–æ–µ', 'üëÄ Other']))
async def user_other(message: types.Message):
    lang = db.get_lang(message.from_user.id)
    if await check_sub_channels(CHANNELS, message.from_user.id):
        if message.chat.type == 'private':
            await bot.send_message(message.from_user.id, _('–†–∞–∑–¥–µ–ª –¥—Ä—É–≥–æ–µ:', lang), reply_markup=sub_menu(lang))
    else:
        await bot.send_message(message.from_user.id, _('–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª', lang), reply_markup=sub_channel_markup)
        

@user_router.message(F.text.in_(['üîô –ù–∞–∑–∞–¥', 'üîô Back']))
async def back_to_main_menu(message: types.Message):
    lang = db.get_lang(message.from_user.id)
    if await check_sub_channels(CHANNELS, message.from_user.id):
        if message.chat.type == 'private':
            await bot.send_message(message.from_user.id, _('–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', lang), reply_markup=main_menu(lang))
    else:
        await bot.send_message(message.from_user.id, _('–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª', lang), reply_markup=sub_channel_markup)
        

@user_router.message(F.text.in_(['üìù –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è', 'üìù Information']))
async def back_to_main_menu(message: types.Message):
    lang = db.get_lang(message.from_user.id)
    if await check_sub_channels(CHANNELS, message.from_user.id):
        if message.chat.type == 'private':
            await bot.send_message(message.from_user.id, _('–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:', lang), reply_markup=other_inline_menu(lang))
    else:
        await bot.send_message(message.from_user.id, _('–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª', lang), reply_markup=sub_channel_markup)
        
@user_router.message(F.text.in_(['üí∏ –ö—É—Ä—Å USD/RUB', 'üí∏ Rate USD/RUB']))
async def get_usd_rub(message: types.Message):
    lang = db.get_lang(message.from_user.id)
    if await check_sub_channels(CHANNELS, message.from_user.id):
        if message.chat.type == 'private':
            await bot.send_message(message.from_user.id, f'{_("–¢–µ–∫—É—â–∏–π –∫—É—Ä—Å:", lang)} {get_rate()} {_("—Ä—É–±.", lang)}')
    else:
        await bot.send_message(message.from_user.id, _('–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª', lang), reply_markup=sub_channel_markup)
        
@user_router.message(F.text.in_(['üåê –°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫', 'üåê Change language']))
async def change_language(message: types.Message):
    await bot.send_message(message.from_user.id, _('–í—ã–±–µ—Ä–∏ —è–∑—ã–∫:'), reply_markup=lang_menu)
        

@user_router.message(F.text)
async def set_nickname(message: types.Message):
    lang = db.get_lang(message.from_user.id)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –º—ã –∂–¥—ë–º –Ω–∏–∫
    if db.get_signup(message.from_user.id) == 'setnickname':
        nickname = message.text.strip()

        if len(nickname) > 15:
            await bot.send_message(message.from_user.id, _('–ù–∏–∫–Ω–µ–π–º –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 15 —Å–∏–º–≤–æ–ª–æ–≤', lang))
        elif '@' in nickname or '/' in nickname:
            await bot.send_message(message.from_user.id, _('–ù–∏–∫–Ω–µ–π–º –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å @ –∏–ª–∏ /', lang))
        else:
            db.set_nickname(message.from_user.id, nickname)
            db.set_signup(message.from_user.id, 'active')
            await bot.send_message(message.from_user.id, _('–í–∞—à –Ω–∏–∫–Ω–µ–∏ÃÜ–º –æ–±–Ω–æ–≤–ª–µ–Ω ‚úÖ', lang), reply_markup=main_menu(lang))
    # filter bad words
    elif message.text in BAD_WORDS:
        await bot.delete_message(chat_id=message.from_user.id, message_id=message.message_id)
        await bot.send_message(message.from_user.id, _('–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ', lang), reply_markup=main_menu(lang))
    else:
        # –û—Ç–≤–µ—Ç –±–æ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
        answer_id = recognize_question(message.text, db.get_question())
        await bot.send_message(message.from_user.id, db.get_answer(answer_id), reply_markup=main_menu(lang))
        

@user_router.callback_query(F.data.startswith('cc_')) 
async def crypto(call: types.CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã"""
    lang = db.get_lang(call.from_user.id)
    cg = CoinGeckoAPI()
    currency = call.data.split('_')[-1]
    result = cg.get_price(ids=currency, vs_currencies='usd')
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    await bot.send_message(call.from_user.id, f'{_("–°—Ç–æ–∏–º–æ—Å—Ç—å", lang)} {currency}: {result[currency]["usd"]}$', reply_markup=crypto_list_inline(lang)) 
    
    
@user_router.callback_query(F.data.startswith('lang_'))
async def set_language(call: types.CallbackQuery):
    db.change_lang(call.from_user.id, call.data.split('_')[-1])
    lang = db.get_lang(call.from_user.id)
    await bot.delete_message(chat_id=call.from_user.id, message_id=call.message.message_id)
    if await check_sub_channels(CHANNELS, call.from_user.id):
        if not db.user_exists(call.from_user.id):
            lang = call.data.split('_')[-1]
            db.set_signup(call.from_user.id, 'setnickname')
        elif db.get_signup(call.from_user.id) != 'active':
            await bot.send_message(call.from_user.id, f'{_("–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –Ω–∏–∫–Ω–µ–π–º", lang)}\n{_("(–¥–æ 15 —Å–∏–º–≤–æ–ª–æ–≤, –±–µ–∑ @ –∏ /)", lang)}')
        else:
            await bot.send_message(call.from_user.id, _('–í—ã —Å–º–µ–Ω–∏–ª–∏ —è–∑—ã–∫', lang), reply_markup=main_menu(lang)) 
    
    else:
        await bot.send_message(call.from_user.id, _('–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª', lang), reply_markup=sub_channel_markup)            


@user_router.callback_query(F.data == 'subchannel')
async def subchannel(call: types.CallbackQuery):
    await bot.delete_message(call.from_user.id, call.message.message_id)
    
    if await check_sub_channels(CHANNELS, call.from_user.id):
        if not db.user_exists(call.from_user.id):
            db.add_user(call.from_user.id)
            await bot.send_message(call.from_user.id, _('–í—ã–±–µ—Ä–∏ —è–∑—ã–∫:'), reply_markup=lang_menu)
        else:
            await bot.send_message(call.from_user.id, _('–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã'))
    else:
        await bot.send_message(call.from_user.id, _('–í—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –∫–∞–Ω–∞–ª'), reply_markup=sub_channel_markup)
        
                

@user_router.callback_query(F.data == 'btn_random')
async def randomize(message: types.Message):
    lang = db.get_lang(message.from_user.id)
    await bot.delete_message(chat_id=message.from_user.id, message_id=message.message.message_id)
    await bot.send_message(message.from_user.id, f'{_("–°–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ:", lang)} {random.randint(1, 100)}', reply_markup=other_inline_menu(lang))